Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMMENT
    DIVIDE
    NOT
    OR
    TIMES

Grammar

Rule 0     S' -> S
Rule 1     S -> cmd
Rule 2     S -> if_stmt
Rule 3     S -> while_stmt
Rule 4     S -> for_stmt
Rule 5     cmd -> move_cmd
Rule 6     cmd -> action_cmd
Rule 7     move_cmd -> MOVE_UP
Rule 8     move_cmd -> MOVE_DOWN
Rule 9     move_cmd -> MOVE_LEFT
Rule 10    move_cmd -> MOVE_RIGHT
Rule 11    action_cmd -> JUMP
Rule 12    action_cmd -> ATTACK
Rule 13    action_cmd -> DEFEND
Rule 14    if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
Rule 15    while_stmt -> WHILE LPAREN expr RPAREN LBRACE S RBRACE
Rule 16    for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
Rule 17    expr -> IDENTIFIER
Rule 18    expr -> NUMBER
Rule 19    expr -> expr PLUS expr
Rule 20    expr -> expr MINUS expr

Terminals, with rules where they appear

AND                  : 
ATTACK               : 12
COMMENT              : 
DEFEND               : 13
DIVIDE               : 
ELSE                 : 14
FOR                  : 16
IDENTIFIER           : 17
IF                   : 14
JUMP                 : 11
LBRACE               : 14 14 15 16
LPAREN               : 14 15 16
MINUS                : 20
MOVE_DOWN            : 8
MOVE_LEFT            : 9
MOVE_RIGHT           : 10
MOVE_UP              : 7
NOT                  : 
NUMBER               : 18
OR                   : 
PLUS                 : 19
RBRACE               : 14 14 15 16
RPAREN               : 14 15 16
SEMICOLON            : 16 16
TIMES                : 
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

S                    : 14 14 15 16 0
action_cmd           : 6
cmd                  : 1
expr                 : 14 15 16 16 16 19 19 20 20
for_stmt             : 4
if_stmt              : 2
move_cmd             : 5
while_stmt           : 3

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . cmd
    (2) S -> . if_stmt
    (3) S -> . while_stmt
    (4) S -> . for_stmt
    (5) cmd -> . move_cmd
    (6) cmd -> . action_cmd
    (14) if_stmt -> . IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (15) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE S RBRACE
    (16) for_stmt -> . FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (7) move_cmd -> . MOVE_UP
    (8) move_cmd -> . MOVE_DOWN
    (9) move_cmd -> . MOVE_LEFT
    (10) move_cmd -> . MOVE_RIGHT
    (11) action_cmd -> . JUMP
    (12) action_cmd -> . ATTACK
    (13) action_cmd -> . DEFEND

    IF              shift and go to state 8
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    MOVE_UP         shift and go to state 11
    MOVE_DOWN       shift and go to state 12
    MOVE_LEFT       shift and go to state 13
    MOVE_RIGHT      shift and go to state 14
    JUMP            shift and go to state 15
    ATTACK          shift and go to state 16
    DEFEND          shift and go to state 17

    S                              shift and go to state 1
    cmd                            shift and go to state 2
    if_stmt                        shift and go to state 3
    while_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 5
    move_cmd                       shift and go to state 6
    action_cmd                     shift and go to state 7

state 1

    (0) S' -> S .



state 2

    (1) S -> cmd .

    $end            reduce using rule 1 (S -> cmd .)
    RBRACE          reduce using rule 1 (S -> cmd .)


state 3

    (2) S -> if_stmt .

    $end            reduce using rule 2 (S -> if_stmt .)
    RBRACE          reduce using rule 2 (S -> if_stmt .)


state 4

    (3) S -> while_stmt .

    $end            reduce using rule 3 (S -> while_stmt .)
    RBRACE          reduce using rule 3 (S -> while_stmt .)


state 5

    (4) S -> for_stmt .

    $end            reduce using rule 4 (S -> for_stmt .)
    RBRACE          reduce using rule 4 (S -> for_stmt .)


state 6

    (5) cmd -> move_cmd .

    $end            reduce using rule 5 (cmd -> move_cmd .)
    RBRACE          reduce using rule 5 (cmd -> move_cmd .)


state 7

    (6) cmd -> action_cmd .

    $end            reduce using rule 6 (cmd -> action_cmd .)
    RBRACE          reduce using rule 6 (cmd -> action_cmd .)


state 8

    (14) if_stmt -> IF . LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE

    LPAREN          shift and go to state 18


state 9

    (15) while_stmt -> WHILE . LPAREN expr RPAREN LBRACE S RBRACE

    LPAREN          shift and go to state 19


state 10

    (16) for_stmt -> FOR . LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE

    LPAREN          shift and go to state 20


state 11

    (7) move_cmd -> MOVE_UP .

    $end            reduce using rule 7 (move_cmd -> MOVE_UP .)
    RBRACE          reduce using rule 7 (move_cmd -> MOVE_UP .)


state 12

    (8) move_cmd -> MOVE_DOWN .

    $end            reduce using rule 8 (move_cmd -> MOVE_DOWN .)
    RBRACE          reduce using rule 8 (move_cmd -> MOVE_DOWN .)


state 13

    (9) move_cmd -> MOVE_LEFT .

    $end            reduce using rule 9 (move_cmd -> MOVE_LEFT .)
    RBRACE          reduce using rule 9 (move_cmd -> MOVE_LEFT .)


state 14

    (10) move_cmd -> MOVE_RIGHT .

    $end            reduce using rule 10 (move_cmd -> MOVE_RIGHT .)
    RBRACE          reduce using rule 10 (move_cmd -> MOVE_RIGHT .)


state 15

    (11) action_cmd -> JUMP .

    $end            reduce using rule 11 (action_cmd -> JUMP .)
    RBRACE          reduce using rule 11 (action_cmd -> JUMP .)


state 16

    (12) action_cmd -> ATTACK .

    $end            reduce using rule 12 (action_cmd -> ATTACK .)
    RBRACE          reduce using rule 12 (action_cmd -> ATTACK .)


state 17

    (13) action_cmd -> DEFEND .

    $end            reduce using rule 13 (action_cmd -> DEFEND .)
    RBRACE          reduce using rule 13 (action_cmd -> DEFEND .)


state 18

    (14) if_stmt -> IF LPAREN . expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 21

state 19

    (15) while_stmt -> WHILE LPAREN . expr RPAREN LBRACE S RBRACE
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 24

state 20

    (16) for_stmt -> FOR LPAREN . expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 25

state 21

    (14) if_stmt -> IF LPAREN expr . RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    RPAREN          shift and go to state 26
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 22

    (17) expr -> IDENTIFIER .

    RPAREN          reduce using rule 17 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 17 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 17 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 17 (expr -> IDENTIFIER .)


state 23

    (18) expr -> NUMBER .

    RPAREN          reduce using rule 18 (expr -> NUMBER .)
    PLUS            reduce using rule 18 (expr -> NUMBER .)
    MINUS           reduce using rule 18 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 18 (expr -> NUMBER .)


state 24

    (15) while_stmt -> WHILE LPAREN expr . RPAREN LBRACE S RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    RPAREN          shift and go to state 29
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 25

    (16) for_stmt -> FOR LPAREN expr . SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    SEMICOLON       shift and go to state 30
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 26

    (14) if_stmt -> IF LPAREN expr RPAREN . LBRACE S RBRACE ELSE LBRACE S RBRACE

    LBRACE          shift and go to state 31


state 27

    (19) expr -> expr PLUS . expr
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 32

state 28

    (20) expr -> expr MINUS . expr
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 33

state 29

    (15) while_stmt -> WHILE LPAREN expr RPAREN . LBRACE S RBRACE

    LBRACE          shift and go to state 34


state 30

    (16) for_stmt -> FOR LPAREN expr SEMICOLON . expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 35

state 31

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE . S RBRACE ELSE LBRACE S RBRACE
    (1) S -> . cmd
    (2) S -> . if_stmt
    (3) S -> . while_stmt
    (4) S -> . for_stmt
    (5) cmd -> . move_cmd
    (6) cmd -> . action_cmd
    (14) if_stmt -> . IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (15) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE S RBRACE
    (16) for_stmt -> . FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (7) move_cmd -> . MOVE_UP
    (8) move_cmd -> . MOVE_DOWN
    (9) move_cmd -> . MOVE_LEFT
    (10) move_cmd -> . MOVE_RIGHT
    (11) action_cmd -> . JUMP
    (12) action_cmd -> . ATTACK
    (13) action_cmd -> . DEFEND

    IF              shift and go to state 8
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    MOVE_UP         shift and go to state 11
    MOVE_DOWN       shift and go to state 12
    MOVE_LEFT       shift and go to state 13
    MOVE_RIGHT      shift and go to state 14
    JUMP            shift and go to state 15
    ATTACK          shift and go to state 16
    DEFEND          shift and go to state 17

    S                              shift and go to state 36
    cmd                            shift and go to state 2
    if_stmt                        shift and go to state 3
    while_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 5
    move_cmd                       shift and go to state 6
    action_cmd                     shift and go to state 7

state 32

    (19) expr -> expr PLUS expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    RPAREN          reduce using rule 19 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 19 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 19 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 19 (expr -> expr PLUS expr .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 33

    (20) expr -> expr MINUS expr .
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    RPAREN          reduce using rule 20 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 20 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 20 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 20 (expr -> expr MINUS expr .)

  ! PLUS            [ shift and go to state 27 ]
  ! MINUS           [ shift and go to state 28 ]


state 34

    (15) while_stmt -> WHILE LPAREN expr RPAREN LBRACE . S RBRACE
    (1) S -> . cmd
    (2) S -> . if_stmt
    (3) S -> . while_stmt
    (4) S -> . for_stmt
    (5) cmd -> . move_cmd
    (6) cmd -> . action_cmd
    (14) if_stmt -> . IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (15) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE S RBRACE
    (16) for_stmt -> . FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (7) move_cmd -> . MOVE_UP
    (8) move_cmd -> . MOVE_DOWN
    (9) move_cmd -> . MOVE_LEFT
    (10) move_cmd -> . MOVE_RIGHT
    (11) action_cmd -> . JUMP
    (12) action_cmd -> . ATTACK
    (13) action_cmd -> . DEFEND

    IF              shift and go to state 8
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    MOVE_UP         shift and go to state 11
    MOVE_DOWN       shift and go to state 12
    MOVE_LEFT       shift and go to state 13
    MOVE_RIGHT      shift and go to state 14
    JUMP            shift and go to state 15
    ATTACK          shift and go to state 16
    DEFEND          shift and go to state 17

    S                              shift and go to state 37
    cmd                            shift and go to state 2
    if_stmt                        shift and go to state 3
    while_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 5
    move_cmd                       shift and go to state 6
    action_cmd                     shift and go to state 7

state 35

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr . SEMICOLON expr RPAREN LBRACE S RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    SEMICOLON       shift and go to state 38
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 36

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S . RBRACE ELSE LBRACE S RBRACE

    RBRACE          shift and go to state 39


state 37

    (15) while_stmt -> WHILE LPAREN expr RPAREN LBRACE S . RBRACE

    RBRACE          shift and go to state 40


state 38

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON . expr RPAREN LBRACE S RBRACE
    (17) expr -> . IDENTIFIER
    (18) expr -> . NUMBER
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr

    IDENTIFIER      shift and go to state 22
    NUMBER          shift and go to state 23

    expr                           shift and go to state 41

state 39

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE . ELSE LBRACE S RBRACE

    ELSE            shift and go to state 42


state 40

    (15) while_stmt -> WHILE LPAREN expr RPAREN LBRACE S RBRACE .

    $end            reduce using rule 15 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE S RBRACE .)
    RBRACE          reduce using rule 15 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE S RBRACE .)


state 41

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr . RPAREN LBRACE S RBRACE
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 27
    MINUS           shift and go to state 28


state 42

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE . LBRACE S RBRACE

    LBRACE          shift and go to state 44


state 43

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN . LBRACE S RBRACE

    LBRACE          shift and go to state 45


state 44

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE . S RBRACE
    (1) S -> . cmd
    (2) S -> . if_stmt
    (3) S -> . while_stmt
    (4) S -> . for_stmt
    (5) cmd -> . move_cmd
    (6) cmd -> . action_cmd
    (14) if_stmt -> . IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (15) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE S RBRACE
    (16) for_stmt -> . FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (7) move_cmd -> . MOVE_UP
    (8) move_cmd -> . MOVE_DOWN
    (9) move_cmd -> . MOVE_LEFT
    (10) move_cmd -> . MOVE_RIGHT
    (11) action_cmd -> . JUMP
    (12) action_cmd -> . ATTACK
    (13) action_cmd -> . DEFEND

    IF              shift and go to state 8
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    MOVE_UP         shift and go to state 11
    MOVE_DOWN       shift and go to state 12
    MOVE_LEFT       shift and go to state 13
    MOVE_RIGHT      shift and go to state 14
    JUMP            shift and go to state 15
    ATTACK          shift and go to state 16
    DEFEND          shift and go to state 17

    S                              shift and go to state 46
    cmd                            shift and go to state 2
    if_stmt                        shift and go to state 3
    while_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 5
    move_cmd                       shift and go to state 6
    action_cmd                     shift and go to state 7

state 45

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE . S RBRACE
    (1) S -> . cmd
    (2) S -> . if_stmt
    (3) S -> . while_stmt
    (4) S -> . for_stmt
    (5) cmd -> . move_cmd
    (6) cmd -> . action_cmd
    (14) if_stmt -> . IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE
    (15) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE S RBRACE
    (16) for_stmt -> . FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE
    (7) move_cmd -> . MOVE_UP
    (8) move_cmd -> . MOVE_DOWN
    (9) move_cmd -> . MOVE_LEFT
    (10) move_cmd -> . MOVE_RIGHT
    (11) action_cmd -> . JUMP
    (12) action_cmd -> . ATTACK
    (13) action_cmd -> . DEFEND

    IF              shift and go to state 8
    WHILE           shift and go to state 9
    FOR             shift and go to state 10
    MOVE_UP         shift and go to state 11
    MOVE_DOWN       shift and go to state 12
    MOVE_LEFT       shift and go to state 13
    MOVE_RIGHT      shift and go to state 14
    JUMP            shift and go to state 15
    ATTACK          shift and go to state 16
    DEFEND          shift and go to state 17

    S                              shift and go to state 47
    cmd                            shift and go to state 2
    if_stmt                        shift and go to state 3
    while_stmt                     shift and go to state 4
    for_stmt                       shift and go to state 5
    move_cmd                       shift and go to state 6
    action_cmd                     shift and go to state 7

state 46

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S . RBRACE

    RBRACE          shift and go to state 48


state 47

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S . RBRACE

    RBRACE          shift and go to state 49


state 48

    (14) if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE .

    $end            reduce using rule 14 (if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE .)
    RBRACE          reduce using rule 14 (if_stmt -> IF LPAREN expr RPAREN LBRACE S RBRACE ELSE LBRACE S RBRACE .)


state 49

    (16) for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE .

    $end            reduce using rule 16 (for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE .)
    RBRACE          reduce using rule 16 (for_stmt -> FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN LBRACE S RBRACE .)

